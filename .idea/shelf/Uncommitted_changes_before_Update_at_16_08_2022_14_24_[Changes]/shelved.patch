Index: configuration.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>browser=chrome\r\nmedunna_url=https://medunna.com/\r\nmedunna_registration_url=https://medunna.com/account/register\r\nregistrant_filename=src/test/resources/testdata/Medunna.txt\r\nappointment_records=src/test/resources/testdata/AppointmentData.txt\r\nbase_url=https://medunna.com\r\napi_registrant_data=src/test/resources/testdata/ApiRegistrantData.txt\r\n\r\ndatabase_registrant_data=src/test/resources/testdata/DatabaseRegistrantData.txt\r\napi_all_registrant_data=src/test/resources/testdata/ApiAllRegistrantData.txt\r\nregistrantApiFile=src/test/resources/Test Data/registrantApiFile.txt\r\nregistrantFile=src/test/resources/Test Data/ApiRegistrantData.txt\r\n\r\ndb_credentials_url = jdbc:postgresql://medunna.com:5432/medunna_db\r\n\r\ndb_username = medunnadb_user\r\n\r\ndb_password = Medunnadb_@129\r\n\r\nmedunnaAccount=https://medunna.com/api/account
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/configuration.properties b/configuration.properties
--- a/configuration.properties	(revision be273cac00b5e2cc0e3deb4f9ce86dd9ab868a24)
+++ b/configuration.properties	(date 1660649731142)
@@ -17,4 +17,5 @@
 
 db_password = Medunnadb_@129
 
-medunnaAccount=https://medunna.com/api/account
\ No newline at end of file
+medunnaAccount=https://medunna.com/api/account
+patient_endpoint=https://medunna.com/api/patients/173461
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/.idea/modules.xml	(date 1660649731142)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/M65Yeni.iml" filepath="$PROJECT_DIR$/M65Yeni.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/test/java/pages/US009page.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/pages/US009page.java b/src/test/java/pages/US009page.java
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/java/pages/US009page.java	(date 1660649731142)
@@ -0,0 +1,182 @@
+package pages;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+import org.openqa.selenium.support.PageFactory;
+import utilities.DriverX;
+
+public class US009page {
+
+    public US009page(){
+        PageFactory.initElements(DriverX.getDriver(), this);
+
+    }
+
+    @FindBy(xpath = "//li[@id='account-menu']")
+    public WebElement accountMenu;
+
+    @FindBy(xpath = "//a[@id='login-item']/span")
+    public WebElement firstSingIn;
+
+    @FindBy(xpath = "//input[@name='username']")
+    public WebElement userName;
+
+    @FindBy(xpath = "//input[@name='password']")
+    public WebElement password;
+
+    @FindBy(xpath = "//button[@class='btn btn-primary']/span")
+    public WebElement secondSignIn;
+
+    @FindBy(xpath = "/html/body/div/div/div/div[2]/nav/div/ul/li[7]/a/span")
+    public WebElement MyPages;
+
+    @FindBy(xpath = "//a[@class='dropdown-item']/span")
+    public WebElement searchPatient;
+
+    @FindBy(xpath = "//input[@name='ssn']")
+    public WebElement patientSsnSearchBox;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr[1]/td[1]")
+    public WebElement patientID;
+
+    @FindBy(xpath = "(//span[@class='d-none d-md-inline'])[2]/span")
+    public WebElement edit;
+
+    @FindBy(xpath = "//input[@name='firstName']")
+    public WebElement firstNameS;
+
+    @FindBy(xpath = "//input[@name='lastName']")
+    public WebElement lastName;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[2]")
+    public WebElement kontrolSSN;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[3]")
+    public WebElement kontrolFirstName;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[4]")
+    public WebElement kontrolLastName;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[5]")
+    public WebElement kontrolBirtDate;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[6]")
+    public WebElement kontrolPhone;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[7]")
+    public WebElement kontrolEmail;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[8]")
+    public WebElement kontrolGender;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[9]")
+    public WebElement kontrolBloodGroup;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[10]")
+    public WebElement kontrolAddress;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[11]")
+    public WebElement kontrolDescription;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[13]")
+    public WebElement kontrolUser;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div[2]/div/table/tbody/tr/td[14]")
+    public WebElement kontrolCountry;
+
+    @FindBy(xpath = "//input[@name='birthDate']")
+    public WebElement birtDate;
+
+    @FindBy(xpath = "//input[@name='phone']")
+    public WebElement phone;
+
+    @FindBy(xpath = "//select[@name='gender']")
+    public WebElement gender;
+
+    @FindBy(xpath = "//select[@name='bloodGroup']")
+    public WebElement bloodGroup;
+
+    @FindBy(xpath = "//input[@name='adress']")
+    public WebElement adress;
+
+    @FindBy(xpath = "//textarea[@id='patient-description']")
+    public WebElement description;
+
+    @FindBy(xpath = "//select[@name='user.id']")
+    public WebElement user;
+
+    @FindBy(xpath = "//select[@name='country.id']")
+    public WebElement country;
+
+    @FindBy(xpath = "//button[@id='save-entity']/span")
+    public WebElement saveButtonS;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div/h2/b")
+    public WebElement parientIdAfterSave;
+
+// ###########  Admin  ###########
+
+    @FindBy(xpath = "//li[@id='entity-menu']/a/span")
+    public WebElement itemsTitles;
+
+    @FindBy(xpath = "//li[@id='entity-menu']/div/a[1]")
+    public WebElement patientButton;
+
+    @FindBy(xpath = "(//td[@class='text-right']/div/a/span/span)[1]")
+    public WebElement viewButton;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div/div/dl/dd[1]")
+    public WebElement patientSsn;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div/div/dl/dd[2]")
+    public WebElement patientFNameA;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div/div/dl/dd[3]")
+    public WebElement patientLNameA;
+
+    @FindBy(xpath = "//*[@id=\"app-view-container\"]/div/div/div/div/div/dl/dd[5]")
+    public WebElement patientPhoneA;
+
+    @FindBy(xpath = "(//td[@class='text-right']/div/a/span/span)[2]")
+    public WebElement editButton;
+
+    @FindBy(xpath = "(//td[@class='text-right']/div/a/span/span)[3]")
+    public WebElement deleteButton;
+
+    @FindBy(xpath = "//*[@id=\"jhi-confirm-delete-patient\"]/span")
+    public WebElement deleteConfirmButton;
+
+    @FindBy(xpath = "//*[@id=\"root\"]/div/div/div[1]/div/div/div[1]")
+    public WebElement internalServerError;
+
+    @FindBy(xpath = "//input[@id='patient-firstName']")
+    public WebElement patientFirstNameA;
+
+    @FindBy(xpath = "//input[@id='patient-lastName']")
+    public WebElement patientLastNameA;
+
+    @FindBy(xpath = "//button[@id='save-entity']/span")
+    public WebElement saveButtonA;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+}
Index: src/test/java/pojos/US009pojo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/pojos/US009pojo.java b/src/test/java/pojos/US009pojo.java
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/java/pojos/US009pojo.java	(date 1660649731142)
@@ -0,0 +1,206 @@
+package pojos;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class US009pojo {
+    private String id;
+    private String first_name;
+    private String last_name;
+    private String birth_date;
+    private String phone;
+    private String gender;
+    private String blood_group;
+    private String adress;
+    private String description;
+    private String created_date;
+    private String user_id;
+    private String country_id;
+    private String cstate_id;
+    private String created_by;
+    private String last_modified_by;
+    private String last_modified_date;
+    private String email;
+
+    public US009pojo() {
+
+    }
+
+    public US009pojo(String id, String first_name, String last_name, String birth_date, String phone, String gender, String blood_group, String adress, String description, String created_date, String user_id, String country_id, String cstate_id, String created_by, String last_modified_by, String last_modified_date, String email) {
+        this.id = id;
+        this.first_name = first_name;
+        this.last_name = last_name;
+        this.birth_date = birth_date;
+        this.phone = phone;
+        this.gender = gender;
+        this.blood_group = blood_group;
+        this.adress = adress;
+        this.description = description;
+        this.created_date = created_date;
+        this.user_id = user_id;
+        this.country_id = country_id;
+        this.cstate_id = cstate_id;
+        this.created_by = created_by;
+        this.last_modified_by = last_modified_by;
+        this.last_modified_date = last_modified_date;
+        this.email = email;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getFirst_name() {
+        return first_name;
+    }
+
+    public void setFirst_name(String first_name) {
+        this.first_name = first_name;
+    }
+
+    public String getLast_name() {
+        return last_name;
+    }
+
+    public void setLast_name(String last_name) {
+        this.last_name = last_name;
+    }
+
+    public String getBirth_date() {
+        return birth_date;
+    }
+
+    public void setBirth_date(String birth_date) {
+        this.birth_date = birth_date;
+    }
+
+    public String getPhone() {
+        return phone;
+    }
+
+    public void setPhone(String phone) {
+        this.phone = phone;
+    }
+
+    public String getGender() {
+        return gender;
+    }
+
+    public void setGender(String gender) {
+        this.gender = gender;
+    }
+
+    public String getBlood_group() {
+        return blood_group;
+    }
+
+    public void setBlood_group(String blood_group) {
+        this.blood_group = blood_group;
+    }
+
+    public String getAdress() {
+        return adress;
+    }
+
+    public void setAdress(String adress) {
+        this.adress = adress;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getCreated_date() {
+        return created_date;
+    }
+
+    public void setCreated_date(String created_date) {
+        this.created_date = created_date;
+    }
+
+    public String getUser_id() {
+        return user_id;
+    }
+
+    public void setUser_id(String user_id) {
+        this.user_id = user_id;
+    }
+
+    public String getCountry_id() {
+        return country_id;
+    }
+
+    public void setCountry_id(String country_id) {
+        this.country_id = country_id;
+    }
+
+    public String getCstate_id() {
+        return cstate_id;
+    }
+
+    public void setCstate_id(String cstate_id) {
+        this.cstate_id = cstate_id;
+    }
+
+    public String getCreated_by() {
+        return created_by;
+    }
+    public void setCreated_by(String created_by) {
+        this.created_by = created_by;
+    }
+
+    public String getLast_modified_by() {
+        return last_modified_by;
+    }
+
+    public void setLast_modified_by(String last_modified_by) {
+        this.last_modified_by = last_modified_by;
+    }
+
+    public String getLast_modified_date() {
+        return last_modified_date;
+    }
+
+    public void setLast_modified_date(String last_modified_date) {
+        this.last_modified_date = last_modified_date;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    @Override
+    public String toString() {
+        return "Patient{" +
+                "id =" + id +
+                ", first_name='" + first_name + '\'' +
+                ", last_name='" + last_name + '\'' +
+                ", birth_date='" + birth_date + '\'' +
+                ", phone='" + phone + '\'' +
+                ", gender='" + gender + '\'' +
+                ", blood_group='" + blood_group + '\'' +
+                ", adress='" + adress + '\'' +
+                ", description='" + description + '\'' +
+                ", created_date='" + created_date + '\'' +
+                ", user_id=" + user_id +
+                ", country_id=" + country_id +
+                ", cstate_id=" + cstate_id +
+                ", created_by='" + created_by + '\'' +
+                ", last_modified_by='" + last_modified_by + '\'' +
+                ", last_modified_date='" + last_modified_date + '\'' +
+                ", email='" + email + '\'' +
+                '}';
+    }
+}
Index: src/test/java/utilities/Authentication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/utilities/Authentication.java b/src/test/java/utilities/Authentication.java
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/java/utilities/Authentication.java	(date 1660649731142)
@@ -0,0 +1,43 @@
+package utilities;
+
+import io.restassured.builder.RequestSpecBuilder;
+import io.restassured.http.ContentType;
+import io.restassured.path.json.JsonPath;
+import io.restassured.response.Response;
+import io.restassured.specification.RequestSpecification;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static io.restassured.RestAssured.given;
+
+public class Authentication {
+
+    public static String generateToken() {
+        RequestSpecification spec = new RequestSpecBuilder().setBaseUri(ConfigReader.getProperty("base_url")).build();
+        /*
+        {
+        "password": "string",
+        "rememberMe": true,
+        "username": "string"
+        expectedData.put("username", "Team63");
+        expectedData.put("password", "Team63.");
+        expectedData.put("rememberMe",true );
+         }
+         */
+        //Set the expected data / beklenen datayi ekle
+        Map<String,Object > data = new HashMap<String,Object>();
+        data.put("username", "Team65");
+        data.put("password", "Team65.");
+        data.put("rememberMe", true);
+        //Set the url
+        spec.pathParams("first", "api", "second" , "authenticate");
+        //Send the request and get the response / Request gonder  response elde et
+        Response response    = given().spec(spec).contentType(ContentType.JSON).body(data).when().post("/{first}/{second}");
+        //response.prettyPrint();
+        JsonPath json = response.jsonPath();
+        System.out.println("token : " +json.getString("id_token"));
+        return  json.getString("id_token");
+    }
+
+}
Index: src/test/java/utilities/DriverX.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/utilities/DriverX.java b/src/test/java/utilities/DriverX.java
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/java/utilities/DriverX.java	(date 1660649731142)
@@ -0,0 +1,319 @@
+package utilities;
+
+import io.github.bonigarcia.wdm.WebDriverManager;
+import org.openqa.selenium.*;
+import org.openqa.selenium.chrome.ChromeDriver;
+import org.openqa.selenium.chrome.ChromeOptions;
+import org.openqa.selenium.firefox.FirefoxDriver;
+import org.openqa.selenium.ie.InternetExplorerDriver;
+import org.openqa.selenium.interactions.Actions;
+import org.openqa.selenium.safari.SafariDriver;
+import org.openqa.selenium.support.ui.ExpectedCondition;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.Select;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import java.time.Duration;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+public class DriverX {
+    //create a driver instance
+    private static WebDriver driver;
+    private static int timeout = 5;
+
+    //What?=>It is just to create, initialize the driver instance.(Singleton driver)
+    //Why?=>We don't want to create and initialize the driver when we don't need
+    //We will create and initialize the driver when it is null
+    //We can use Driver class with different browser(chrome,firefox,headless)
+    private DriverX() {
+        //we don't want to create another abject. Singleton pattern
+    }
+
+    //to initialize the driver we create a static method
+    public static WebDriver getDriver() {
+        //create the driver if and only if it is null
+        if (driver == null) {
+            String browser = ConfigReader.getProperty("browser");
+            if ("chrome".equals(browser)) {
+                WebDriverManager.chromedriver().setup();
+                driver = new ChromeDriver();
+            } else if ("firefox".equals(browser)) {
+                WebDriverManager.firefoxdriver().setup();
+                driver = new FirefoxDriver();
+            } else if ("ie".equals(browser)) {
+                WebDriverManager.iedriver().setup();
+                driver = new InternetExplorerDriver();
+            } else if ("safari".equals(browser)) {
+                WebDriverManager.getInstance(SafariDriver.class).setup();
+                driver = new SafariDriver();
+            } else if ("chrome-headless".equals(browser)) {
+                WebDriverManager.chromedriver().setup();
+                driver = new ChromeDriver(new ChromeOptions().setHeadless(true));
+            }
+        }
+//        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
+        driver.manage().window().maximize();
+        return driver;
+    }
+
+    public static void closeDriver() {
+        if (driver != null) {//if the driver is pointing chrome
+            driver.quit();//quit the driver
+            driver = null;//set it back to null to make sure driver is null
+            // so I can initialize it again
+            //This is important especially you do cross browser testing(testing with
+            // multiple browser like chrome, firefox, ie etc.)
+        }
+    }
+
+    public static void waitAndClick(WebElement element, int timeout) {
+        for (int i = 0; i < timeout; i++) {
+            try {
+                element.click();
+                return;
+            } catch (WebDriverException e) {
+                wait(1);
+            }
+        }
+    }
+
+    public static void waitAndClick(WebElement element) {
+        for (int i = 0; i < timeout; i++) {
+            try {
+                element.click();
+                return;
+            } catch (WebDriverException e) {
+                wait(1);
+            }
+        }
+    }
+
+
+    public static void waitAndSendText(WebElement element, String text, int timeout) {
+        for (int i = 0; i < timeout; i++) {
+            try {
+                element.sendKeys(text);
+                return;
+            } catch (WebDriverException e) {
+                wait(1);
+            }
+        }
+    }
+
+    //    Driver.waitANdSendText(Element , "TEXT");
+    public static void waitAndSendText(WebElement element, String text) {
+        for (int i = 0; i < timeout; i++) {
+            try {
+                element.sendKeys(text);
+                return;
+            } catch (WebDriverException e) {
+                wait(1);
+            }
+        }
+    }
+
+
+
+    public static void waitAndSendTextWithDefaultTime(WebElement element, String text) {
+        for (int i = 0; i < timeout; i++) {
+            try {
+                element.sendKeys(text);
+                return;
+            } catch (WebDriverException e) {
+                wait(1);
+            }
+        }
+    }
+
+    public static String waitAndGetText(WebElement element, int timeout) {
+        String text = "";
+        for (int i = 0; i < timeout; i++) {
+            try {
+                text = element.getText();
+                return text;
+            } catch (WebDriverException e) {
+                wait(1);
+            }
+        }
+        return null;
+    }
+
+
+    //Webdriver
+    //ChromeDriver
+    //Iedriver
+    //FirefoxDriver
+
+    public static void wait2(int sec) {
+        try {
+            Thread.sleep(1000 * sec);
+        } catch (NoSuchElementException e) {
+            e.printStackTrace();
+        } catch (TimeoutException e) {
+            e.printStackTrace();
+        } catch (StaleElementReferenceException e) {
+            e.printStackTrace();
+        } catch (ElementClickInterceptedException e) {
+            e.printStackTrace();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    //5 seconds
+    public static void waitAndClickElement(WebElement element, int seconds) {
+        for (int i = 0; i < seconds; i++) {
+
+            try {
+                element.click();
+                break;
+            } catch (Exception e) {
+                wait2(1);
+            }
+
+
+        }
+    }
+
+    public static void wait(int secs) {
+
+        try {
+            Thread.sleep(1000 * secs);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        } catch (TimeoutException e) {
+            e.printStackTrace();
+        } catch (NoSuchElementException e) {
+            e.printStackTrace();
+        } catch (StaleElementReferenceException e) {
+            e.printStackTrace();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static WebElement waitForVisibility(WebElement element, int timeToWaitInSec) {
+        WebDriverWait wait = new WebDriverWait(DriverX.getDriver(), Duration.ofSeconds(timeout));
+        return wait.until(ExpectedConditions.visibilityOf(element));
+    }
+
+    public static WebElement waitForVisibility(By locator, int timeout) {
+        WebDriverWait wait = new WebDriverWait(DriverX.getDriver(), Duration.ofSeconds(timeout));
+        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
+    }
+
+    public static Boolean waitForInVisibility(By locator, int timeout) {
+        WebDriverWait wait = new WebDriverWait(DriverX.getDriver(), Duration.ofSeconds(timeout));
+        return wait.until(ExpectedConditions.invisibilityOfElementLocated(locator));
+    }
+
+    public static WebElement waitForClickablility(WebElement element, int timeout) {
+        WebDriverWait wait = new WebDriverWait(DriverX.getDriver(), Duration.ofSeconds(timeout));
+        return wait.until(ExpectedConditions.elementToBeClickable(element));
+    }
+
+    public static WebElement waitForClickablility(By locator, int timeout) {
+        WebDriverWait wait = new WebDriverWait(DriverX.getDriver(), Duration.ofSeconds(timeout));
+        return wait.until(ExpectedConditions.elementToBeClickable(locator));
+    }
+
+    public static void waitForPageToLoad(long timeOutInSeconds) {
+        ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {
+            public Boolean apply(WebDriver driver) {
+                return ((JavascriptExecutor) driver).executeScript("return document.readyState").equals("complete");
+            }
+        };
+        try {
+            WebDriverWait wait = new WebDriverWait(DriverX.getDriver(), Duration.ofSeconds(timeout));
+            wait.until(expectation);
+        } catch (Exception error) {
+            error.printStackTrace();
+        }
+    }
+
+    public static void executeJScommand(WebElement element, String command) {
+        JavascriptExecutor jse = (JavascriptExecutor) DriverX.getDriver();
+        jse.executeScript(command, element);
+    }
+
+    public static void selectAnItemFromDropdown(WebElement item, String selectableItem) {
+        wait(5);
+        Select select = new Select(item);
+        for (int i = 0; i < select.getOptions().size(); i++) {
+            if (select.getOptions().get(i).getText().equalsIgnoreCase(selectableItem)) {
+                select.getOptions().get(i).click();
+                break;
+            }
+        }
+
+    }
+
+    /**
+     * Clicks on an element using JavaScript
+     *
+     * @param element
+     */
+    public static void clickWithJS(WebElement element) {
+        ((JavascriptExecutor) DriverX.getDriver()).executeScript("arguments[0].scrollIntoView(true);", element);
+        ((JavascriptExecutor) DriverX.getDriver()).executeScript("arguments[0].click();", element);
+    }
+
+    /**
+     * Clicks on an element using JavaScript
+     *
+     * @param elements
+     */
+    public static void clickWithJSAsList(List<WebElement> elements) {
+        for (WebElement each : elements) {
+            ((JavascriptExecutor) DriverX.getDriver()).executeScript("arguments[0].scrollIntoView(true);", waitForVisibility(each, 5));
+            ((JavascriptExecutor) DriverX.getDriver()).executeScript("arguments[0].click();", each);
+        }
+    }
+
+    /**
+     * Performs double click action on an element
+     *
+     * @param element
+     */
+    public static void doubleClick(WebElement element) {
+        new Actions(DriverX.getDriver()).doubleClick(element).build().perform();
+    }
+
+    //    Parameter1 : WebElement
+//    Parameter2:  String
+//    Driver.selectByVisibleText(dropdown element, "CHECKING-91303-116.98$")
+    public static void selectByVisibleText(WebElement element, String text) {
+        Select objSelect = new Select(element);
+        objSelect.selectByVisibleText(text);
+    }
+    //    Parameter1 : WebElement
+//    Parameter2:  int
+//    Driver.selectByIndex(dropdown element, 1)
+    public static void selectByIndex(WebElement element, int index) {
+        Select objSelect = new Select(element);
+        objSelect.selectByIndex(index);
+    }
+    //    Parameter1 : WebElement
+//    Parameter2:  String
+//    Driver.selectByIndex(dropdown element, "91303")
+    public static void selectByValue(WebElement element, String value) {
+        Select objSelect = new Select(element);
+        List<WebElement> elementCount = objSelect.getOptions();
+        objSelect.selectByValue(value);
+        System.out.println("number of elements: " + elementCount.size());
+    }
+
+    public static void sleep(int timeOut) {
+        try {
+            Thread.sleep(timeOut);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static void waitAndClickLocationText(WebElement element, String value) {
+        DriverX.getDriver().findElement(By.xpath("//*[text()='" + value + "']")).click();
+    }
+}
\ No newline at end of file
Index: src/test/java/stepDefinitions/Db/US009Db.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/stepDefinitions/Db/US009Db.java b/src/test/java/stepDefinitions/Db/US009Db.java
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/java/stepDefinitions/Db/US009Db.java	(date 1660649731142)
@@ -0,0 +1,43 @@
+package stepDefinitions.Db;
+
+import io.cucumber.java.en.*;
+import org.junit.Assert;
+import utilities.DBUtils;
+
+import java.sql.SQLException;
+
+
+public class US009Db {
+
+    @Given("Kullanici database baglanir")
+    public void kullanici_database_baglanir() {
+
+        DBUtils.createConnection();
+
+    }
+
+    @When("Kullanici {string} {string} ile {string} tablosundan {string} alir")
+    public void kullanici_ile_tablosundan_alir(String column, String table, String idColumn, String actualId) {
+
+        String query = "select " + column + " from " + table + " where " + idColumn + "=" + actualId;
+        DBUtils.executeQuery(query);
+
+    }
+
+    @Then("Hastanin {string} {string} olmalidir")
+    public void hastanin_olmalidir(String firstNameColumn, String actualFirstName) throws SQLException {
+
+        DBUtils.getResultset().next();
+
+        Assert.assertEquals(DBUtils.getResultset().getObject(firstNameColumn), actualFirstName);
+
+    }
+
+    @Then("Kullanici database baglantisini kapatir")
+    public void kullanici_database_baglantisini_kapatir() {
+
+        DBUtils.closeConnection();
+
+    }
+
+}
Index: src/test/java/stepDefinitions/Ui/US009StepD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/stepDefinitions/Ui/US009StepD.java b/src/test/java/stepDefinitions/Ui/US009StepD.java
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/java/stepDefinitions/Ui/US009StepD.java	(date 1660649731142)
@@ -0,0 +1,196 @@
+package stepDefinitions.Ui;
+
+
+import io.cucumber.java.en.Given;
+import io.cucumber.java.en.Then;
+import org.junit.Assert;
+import org.openqa.selenium.JavascriptExecutor;
+import org.openqa.selenium.Keys;
+import org.openqa.selenium.interactions.Actions;
+import pages.US009page;
+import utilities.DriverX;
+
+
+public class US009StepD {
+
+    US009page u=new US009page();
+    Actions actions=new Actions(DriverX.getDriver());
+
+    @Given("Kullanici Medunna Url'ye gider")
+    public void kullanici_medunna_url_ye_gider() {
+        DriverX.getDriver().get("https://medunna.com/");}
+
+    @Given("Sign in butonunu tiklar")
+    public void sign_in_butonunu_tiklar() throws InterruptedException {
+    u.accountMenu.click();
+    Thread.sleep(1000);
+    DriverX.waitAndClick(u.firstSingIn);
+    }
+
+    @Given("Staff username ve password girer")
+    public void staff_username_ve_password_girer() {
+        u.userName.sendKeys("PersonelOnur65");
+        u.password.sendKeys("PersonelOnur.65");
+    }
+
+    @Given("Staff sign in butonuna tiklar ve sign olur")
+    public void staff_sign_in_butonuna_tiklar_ve_sign_olur() {
+        u.secondSignIn.click();
+    }
+
+    @Then("Staff My Pages butonunu tiklar")
+    public void staff_my_pages_butonunu_tiklar() {
+        DriverX.waitAndClick(u.MyPages);
+    }
+
+    @Then("Staff Search Patient sekmesini tiklar")
+    public void staff_search_patient_sekmesini_tiklar() {
+        u.searchPatient.click();
+    }
+
+    @Then("Staff, Patients SSN search Boxa bir hasta SSN'i girer")
+    public void staff_patients_ssn_search_boxa_bir_hasta_ssn_i_girer() {
+    u.patientSsnSearchBox.click();
+    u.patientSsnSearchBox.sendKeys("135-79-1359" + Keys.ENTER);
+    }
+
+    @Then("Staff ekrani saga kaydirarak edit butonunu tiklar")
+    public void staff_ekrani_saga_kaydirarak_edit_butonunu_tiklar() throws InterruptedException {
+        Thread.sleep(1000);
+        ((JavascriptExecutor) DriverX.getDriver()).executeScript("javascript:window.scrollBy(0,800)");
+
+        JavascriptExecutor jsExecutor = (JavascriptExecutor) DriverX.getDriver();
+        jsExecutor.executeScript("arguments[0].click();", u.patientID);
+
+        jsExecutor = (JavascriptExecutor) DriverX.getDriver();
+        jsExecutor.executeScript("arguments[0].click();", u.edit);
+        // patientView.EditButton.click();
+        Thread.sleep(2000);
+    }
+
+    @Then("Staff hastanin tum bilgilerini duzenler")
+    public void staff_hastanin_tum_bilgilerini_duzenler() {
+        u.firstNameS.clear();
+        u.firstNameS.sendKeys("Muzmin");
+        u.lastName.clear();
+        u.lastName.sendKeys("Hasta");
+    }
+
+    @Then("Staff butonuna tiklar")
+    public void staff_butonuna_tiklar() {
+        DriverX.waitAndClick(u.saveButtonS);
+        DriverX.closeDriver();
+    }
+
+    @Then("Staff hastanin tum bilgilerinin dolu oldugunu kontrol eder")
+    public void staff_hastanin_tum_bilgilerinin_dolu_oldugunu_kontrol_eder() {
+        Assert.assertTrue(u.kontrolSSN.isDisplayed());
+        Assert.assertTrue(u.kontrolFirstName.isDisplayed());
+        Assert.assertTrue(u.kontrolLastName.isDisplayed());
+        Assert.assertTrue(u.kontrolBirtDate.isDisplayed());
+        Assert.assertTrue(u.kontrolPhone.isDisplayed());
+        Assert.assertTrue(u.kontrolEmail.isDisplayed());
+        Assert.assertTrue(u.kontrolGender.isDisplayed());
+        Assert.assertTrue(u.kontrolBloodGroup.isDisplayed());
+        Assert.assertTrue(u.kontrolAddress.isDisplayed());
+        Assert.assertTrue(u.kontrolDescription.isDisplayed());
+        Assert.assertTrue(u.kontrolUser.isDisplayed());
+        Assert.assertTrue(u.kontrolCountry.isDisplayed());
+        DriverX.closeDriver();
+    }
+
+    @Given("Admin username ve password girer")
+    public void admin_username_ve_password_girer() {
+        u.userName.sendKeys("Team65");
+        u.password.sendKeys("Team65.");
+    }
+
+    @Given("Admin sign in butonuna tiklar ve sign olur")
+    public void admin_sign_in_butonuna_tiklar_ve_sign_olur() { u.secondSignIn.click();}
+
+    @Then("Admin Items&Titles butonunu tiklar")
+    public void admin_items_titles_butonunu_tiklar() {
+    DriverX.waitAndClick(u.itemsTitles);
+    }
+
+    @Then("Admin Dropdown menusunden Patients butonunu tiklar")
+    public void admin_dropdown_menusunden_patients_butonunu_tiklar() {
+        u.patientButton.click();
+    }
+
+    @Then("Admin edit butonuna tiklar")
+    public void admin_edit_butonuna_tiklar() throws InterruptedException {
+        Thread.sleep(1000);
+        ((JavascriptExecutor) DriverX.getDriver()).executeScript("javascript:window.scrollBy(0,800)");
+        JavascriptExecutor jsExecutor = (JavascriptExecutor) DriverX.getDriver();
+        jsExecutor = (JavascriptExecutor) DriverX.getDriver();
+        jsExecutor.executeScript("arguments[0].click();", u.editButton);
+        // patientView.EditButton.click();
+        Thread.sleep(2000);
+    }
+
+    @Then("Admin patientin tum bilgilerini update eder")
+    public void admin_patientin_tum_bilgilerini_update_eder() {
+        u.patientFirstNameA.clear();
+        u.patientFirstNameA.sendKeys("RamizGrimes");
+        u.patientLastNameA.clear();
+        u.patientLastNameA.sendKeys("Dayi");
+    }
+
+    @Then("Admin save butonunu tiklar")
+    public void admin_save_butonunu_tiklar() {
+        DriverX.waitAndClick(u.saveButtonA);
+        DriverX.closeDriver();
+    }
+
+    @Then("Admin wiew butonunu tiklar")
+    public void admin_wiew_butonunu_tiklar() throws InterruptedException {
+        Thread.sleep(1000);
+        ((JavascriptExecutor) DriverX.getDriver()).executeScript("javascript:window.scrollBy(0,800)");
+        JavascriptExecutor jsExecutor = (JavascriptExecutor) DriverX.getDriver();
+        jsExecutor = (JavascriptExecutor) DriverX.getDriver();
+        jsExecutor.executeScript("arguments[0].click();", u.viewButton);
+        Thread.sleep(1000);
+    }
+
+    @Then("Admin Patient bilgilerini dogrular")
+    public void admin_patient_bilgilerini_dogrular() {
+        Assert.assertEquals("234-23-2345", u.patientSsn.getText());
+        Assert.assertEquals("RamizGrimes", u.patientFNameA.getText());
+        Assert.assertEquals("Dayi", u.patientLNameA.getText());
+        Assert.assertEquals("576-753-4340", u.patientPhoneA.getText());
+        DriverX.closeDriver();
+    }
+
+    @Then("Admin delete butonuna tiklar")
+    public void admin_delete_butonuna_tiklar() throws InterruptedException {
+        Thread.sleep(1000);
+        ((JavascriptExecutor) DriverX.getDriver()).executeScript("javascript:window.scrollBy(0,800)");
+        JavascriptExecutor jsExecutor = (JavascriptExecutor) DriverX.getDriver();
+        jsExecutor = (JavascriptExecutor) DriverX.getDriver();
+        jsExecutor.executeScript("arguments[0].click();", u.deleteButton);
+        Thread.sleep(1000);
+    }
+
+    @Then("Admin patientin bilgilerini siler")
+    public void admin_patientin_bilgilerini_siler() {
+        u.deleteConfirmButton.click();
+        // ##################################################
+        //Bug Var. delete confirm tiklaninca "internal server error" hatasi veriyor
+        // ####################################################
+        DriverX.closeDriver();
+    }
+
+    @Then("Delete butonu gorunmez")
+    public void delete_butonu_gorunmez() {
+        //Assert.assertFalse(u.deleteButton.isDisplayed());
+        DriverX.closeDriver();
+    }
+
+    @Then("Ptients Search Box gorunmez")
+    public void ptients_search_box_gorunmez() {
+        //Assert.assertFalse(u.patientSsnSearchBox.isDisplayed());
+        DriverX.closeDriver();
+    }
+
+}
Index: src/test/java/stepDefinitions/Api/US009Api.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/stepDefinitions/Api/US009Api.java b/src/test/java/stepDefinitions/Api/US009Api.java
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/java/stepDefinitions/Api/US009Api.java	(date 1660649731142)
@@ -0,0 +1,73 @@
+package stepDefinitions.Api;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import io.cucumber.java.en.Given;
+import io.cucumber.java.en.Then;
+import io.restassured.http.ContentType;
+import io.restassured.response.Response;
+import pojos.US009pojo;
+import utilities.Authentication;
+import utilities.ConfigReader;
+
+import java.io.IOException;
+
+import static io.restassured.RestAssured.given;
+
+
+public class US009Api {
+
+    Response response;
+    US009pojo[] pojo;
+
+    @Given("Kullanici {string} id'li hasta verileri icin bir get request gonderir")
+    public void kullanici_id_li_hasta_verileri_icin_bir_get_request_gonderir(String string) {
+
+        response= given().headers(
+                "Authorization",
+                "Bearer " + Authentication.generateToken(),
+                "Content-Type",
+                ContentType.JSON,
+                "Accept",
+                ContentType.JSON
+        ).when().get(ConfigReader.getProperty("patient_endpoint"));
+
+    }
+
+    @Given("Kullanici Status code {int} oldugunu dogrular")
+    public void kullanici_status_code_oldugunu_dogrular(Integer int1) {
+        response.then().assertThat().statusCode(200);
+        response.prettyPrint();
+    }
+
+    @Given("Kullanici gelen datayi deserialize eder")
+    public void kullanici_gelen_datayi_deserialize_eder() throws IOException {
+
+        ObjectMapper obj=new ObjectMapper();
+        // pojo=obj.readValue(response.asString(), US009_Pojo[].class);
+        // System.out.println(pojo.length());
+
+    }
+
+    @Then("Kullanici, hasta ID, adini, ssn'yi, e-postayi dogrular")
+    public void kullanici_hasta_id_adini_ssn_yi_e_postayi_dogrular() {
+
+
+
+    }
+
+    @Given("Kullanici patients icin post request yapar")
+    public void kullanici_patients_icin_post_request_yapar() {
+
+
+
+    }
+
+
+    @Then("Kullanici post request validation yapar")
+    public void kullanici_post_request_validation_yapar() {
+
+
+
+    }
+
+}
Index: src/test/resources/features/DbFeature/US009Db.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/features/DbFeature/US009Db.feature b/src/test/resources/features/DbFeature/US009Db.feature
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/resources/features/DbFeature/US009Db.feature	(date 1660649731142)
@@ -0,0 +1,21 @@
+
+Feature:US009 Kullanici hasta bilgilerini gorebilmeli ve duzenleyebilmeli
+
+
+  @DB_09
+  Scenario:TC07 Kullanici Staff DB deki hasta bilgilerini okuyabilmelidir
+    Given Kullanici database baglanir
+    When Kullanici "*" "patient" ile "id" tablosundan "173461" alir
+    Then Hastanin "FIRST_NAME" "Muzmin" olmalidir
+    And Kullanici database baglantisini kapatir
+
+  @DB_09
+  Scenario:TC07 Kullanici Admin DB deki hasta bilgilerini dogrulayabilmeli
+    Given Kullanici database baglanir
+    When Kullanici "*" "patient" ile "id" tablosundan "173461" alir
+    Then Hastanin "FIRST_NAME" "Muzmin" olmalidir
+    And Kullanici database baglantisini kapatir
+
+
+
+
Index: src/test/resources/features/ApiFeature/US009Api.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/features/ApiFeature/US009Api.feature b/src/test/resources/features/ApiFeature/US009Api.feature
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/resources/features/ApiFeature/US009Api.feature	(date 1660649731142)
@@ -0,0 +1,19 @@
+Feature:US009 Kullanici hasta bilgilerini dogrular
+
+
+  @Api_09
+  @US009_API
+  Scenario:TC08 Kullanici hastanin ID, firstname, ssn, email bilgilerini dogrular
+
+    Given Kullanici "173461" id'li hasta verileri icin bir get request gonderir
+    And Kullanici Status code 200 oldugunu dogrular
+    And Kullanici gelen datayi deserialize eder
+    Then Kullanici, hasta ID, adini, ssn'yi, e-postayi dogrular
+
+
+  @Api_09
+  @US009_API
+  Scenario:Post request validation
+
+    Given Kullanici patients icin post request yapar
+    Then Kullanici post request validation yapar
\ No newline at end of file
Index: src/test/resources/features/UiFeatures/US009.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/features/UiFeatures/US009.feature b/src/test/resources/features/UiFeatures/US009.feature
new file mode 100644
--- /dev/null	(date 1660649731142)
+++ b/src/test/resources/features/UiFeatures/US009.feature	(date 1660649731142)
@@ -0,0 +1,86 @@
+Feature:US009 Staff hasta bilgilerini gorebilmeli, duzenleyebilmeli ve silememelidir.
+
+  @UITest
+  Scenario:TC01 Staff hastanin tum bilgilerini duzenler
+
+    Given Kullanici Medunna Url'ye gider
+    And Sign in butonunu tiklar
+    And Staff username ve password girer
+    And Staff sign in butonuna tiklar ve sign olur
+    Then Staff My Pages butonunu tiklar
+    Then Staff Search Patient sekmesini tiklar
+    And Staff, Patients SSN search Boxa bir hasta SSN'i girer
+    Then Staff ekrani saga kaydirarak edit butonunu tiklar
+    And Staff hastanin tum bilgilerini duzenler
+    And Staff butonuna tiklar
+
+  @UITest
+  Scenario:TC02  Staff hastanin tum bilgilerinin dolu oldugunu kontrol eder
+
+    Given Kullanici Medunna Url'ye gider
+    And Sign in butonunu tiklar
+    And Staff username ve password girer
+    And Staff sign in butonuna tiklar ve sign olur
+    Then Staff My Pages butonunu tiklar
+    Then Staff Search Patient sekmesini tiklar
+    And Staff, Patients SSN search Boxa bir hasta SSN'i girer
+    And Staff hastanin tum bilgilerinin dolu oldugunu kontrol eder
+
+  @UITest
+  Scenario:TC03 Admin hastanin bilgilerini update eder
+
+    Given Kullanici Medunna Url'ye gider
+    And Sign in butonunu tiklar
+    And Admin username ve password girer
+    And Admin sign in butonuna tiklar ve sign olur
+    Then Admin Items&Titles butonunu tiklar
+    And Admin Dropdown menusunden Patients butonunu tiklar
+    Then Admin edit butonuna tiklar
+    And Admin patientin tum bilgilerini update eder
+    And Admin save butonunu tiklar
+
+  @UITest
+  Scenario:TC04 Admin hastanin bilgilerini dogrular
+
+    Given Kullanici Medunna Url'ye gider
+    And Sign in butonunu tiklar
+    And Admin username ve password girer
+    And Admin sign in butonuna tiklar ve sign olur
+    Then Admin Items&Titles butonunu tiklar
+    And Admin Dropdown menusunden Patients butonunu tiklar
+    Then Admin wiew butonunu tiklar
+    And Admin Patient bilgilerini dogrular
+
+  @UITest
+  Scenario:TC05 Admin patientin bilgilerini siler
+
+    Given Kullanici Medunna Url'ye gider
+    And Sign in butonunu tiklar
+    And Admin username ve password girer
+    And Admin sign in butonuna tiklar ve sign olur
+    Then Admin Items&Titles butonunu tiklar
+    And Admin Dropdown menusunden Patients butonunu tiklar
+    Then Admin delete butonuna tiklar
+    And Admin patientin bilgilerini siler
+
+  @UITest
+  Scenario:TC08 Staf hastalari silememeli
+
+    Given Kullanici Medunna Url'ye gider
+    And Sign in butonunu tiklar
+    And Staff username ve password girer
+    And Staff sign in butonuna tiklar ve sign olur
+    Then Staff My Pages butonunu tiklar
+    Then Staff Search Patient sekmesini tiklar
+    Then Delete butonu gorunmez
+
+  @UITest
+  Scenario:TC09 Admin SSN ile hasta arayamamali
+
+    Given Kullanici Medunna Url'ye gider
+    And Sign in butonunu tiklar
+    And Admin username ve password girer
+    And Admin sign in butonuna tiklar ve sign olur
+    Then Admin Items&Titles butonunu tiklar
+    And Admin Dropdown menusunden Patients butonunu tiklar
+    Then Ptients Search Box gorunmez
\ No newline at end of file
